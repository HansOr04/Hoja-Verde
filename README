# üîê Sistema de Autenticaci√≥n y Autorizaci√≥n

## üöÄ Inicializaci√≥n del Sistema

### Primer Uso

1. **Aplicar migraciones**:
```bash
alembic upgrade head
```

2. **Crear usuario administrador**:
```bash
python scripts/init_admin.py --samples
```

3. **Iniciar servidor**:
```bash
uvicorn app.main:app --reload
```

## üîë Autenticaci√≥n

### Sistema de Roles

- **Super Admin** (`super_admin`): Acceso total al sistema
- **Admin** (`admin`): Administrador general
- **Supervisor** (`supervisor`): Supervisor de √°rea
- **RRHH** (`rrhh`): Personal de recursos humanos
- **Usuario** (`usuario`): Usuario b√°sico (empleado)

### Flujo de Autenticaci√≥n

1. **Login**: `POST /api/v1/auth/login`
```json
{
  "email": "admin@hojaverde.com",
  "password": "Admin123!",
  "remember_me": false
}
```

2. **Usar Access Token**: Incluir en headers
```
Authorization: Bearer <access_token>
```

3. **Renovar Token**: `POST /api/v1/auth/refresh`
```json
{
  "refresh_token": "<refresh_token>"
}
```

4. **Logout**: `POST /api/v1/auth/logout`

## üìã Endpoints de Autenticaci√≥n

### Autenticaci√≥n B√°sica
- `POST /api/v1/auth/login` - Iniciar sesi√≥n
- `POST /api/v1/auth/logout` - Cerrar sesi√≥n
- `POST /api/v1/auth/logout-all` - Cerrar todas las sesiones
- `POST /api/v1/auth/refresh` - Renovar token

### Informaci√≥n del Usuario
- `GET /api/v1/auth/me` - Informaci√≥n del usuario actual
- `GET /api/v1/auth/validate` - Validar sesi√≥n
- `GET /api/v1/auth/permissions` - Obtener permisos
- `GET /api/v1/auth/check-permission/{permission}` - Verificar permiso espec√≠fico

### Reset de Contrase√±a
- `POST /api/v1/auth/reset-password` - Solicitar reset
- `POST /api/v1/auth/confirm-reset` - Confirmar reset

### Gesti√≥n de Sesiones
- `GET /api/v1/auth/sessions` - Sesiones activas
- `DELETE /api/v1/auth/sessions/{session_id}` - Revocar sesi√≥n

## üë• Endpoints de Usuarios

### CRUD de Usuarios (Requiere permisos de admin)
- `POST /api/v1/usuarios/` - Crear usuario
- `GET /api/v1/usuarios/` - Listar usuarios
- `GET /api/v1/usuarios/{id}` - Obtener usuario
- `PUT /api/v1/usuarios/{id}` - Actualizar usuario
- `DELETE /api/v1/usuarios/{id}` - Desactivar usuario

### Gesti√≥n de Contrase√±as
- `PUT /api/v1/usuarios/{id}/password` - Cambiar contrase√±a
- `POST /api/v1/usuarios/{id}/reset-password` - Reset por admin

### Gesti√≥n de Permisos (Requiere permisos de admin)
- `GET /api/v1/usuarios/{id}/permissions` - Obtener permisos
- `POST /api/v1/usuarios/{id}/permissions` - Gestionar permisos

### Consultas Especiales
- `GET /api/v1/usuarios/roles/{rol}` - Usuarios por rol
- `GET /api/v1/usuarios/inactive/{days}` - Usuarios inactivos
- `GET /api/v1/usuarios/stats/general` - Estad√≠sticas

### Utilidades
- `POST /api/v1/usuarios/{id}/activate` - Activar usuario
- `POST /api/v1/usuarios/{id}/unlock` - Desbloquear usuario

## üîí Sistema de Permisos

### Permisos Disponibles

#### Empleados
- `empleados.crear` - Crear empleados
- `empleados.leer` - Ver empleados
- `empleados.actualizar` - Actualizar empleados
- `empleados.eliminar` - Eliminar empleados

#### Usuarios
- `usuarios.crear` - Crear usuarios
- `usuarios.leer` - Ver usuarios
- `usuarios.actualizar` - Actualizar usuarios
- `usuarios.eliminar` - Eliminar usuarios

#### Registros
- `registros.crear` - Crear registros
- `registros.leer` - Ver registros
- `registros.actualizar` - Actualizar registros
- `registros.eliminar` - Eliminar registros

#### Reportes
- `reportes.generar` - Generar reportes
- `reportes.exportar` - Exportar reportes
- `reportes.avanzados` - Reportes avanzados

#### Configuraci√≥n
- `configuracion.leer` - Ver configuraci√≥n
- `configuracion.actualizar` - Actualizar configuraci√≥n

#### Auditor√≠a
- `auditoria.leer` - Ver auditor√≠a
- `auditoria.exportar` - Exportar auditor√≠a

### Permisos por Rol

#### Super Admin
- Todos los permisos (`*`)

#### Admin
- `empleados.*`
- `usuarios.*`
- `reportes.*`
- `configuracion.*`
- `auditoria.*`

#### Supervisor
- `empleados.leer`
- `empleados.actualizar`
- `registros.*`
- `reportes.leer`

#### RRHH
- `empleados.*`
- `usuarios.leer`
- `reportes.empleados`

#### Usuario
- `empleados.leer` (solo su informaci√≥n)
- `registros.crear` (solo sus registros)

## üõ°Ô∏è Seguridad

### Pol√≠ticas de Contrase√±a
- M√≠nimo 8 caracteres
- Al menos 1 may√∫scula
- Al menos 1 min√∫scula
- Al menos 1 n√∫mero
- Al menos 1 car√°cter especial
- No puede ser una contrase√±a com√∫n

### Protecciones Implementadas
- Hash seguro de contrase√±as (bcrypt)
- Tokens JWT con expiraci√≥n
- Rate limiting
- Bloqueo por intentos fallidos
- Validaci√≥n de tokens activos
- Historial de contrase√±as (evita reutilizaci√≥n)

### Configuraciones de Seguridad
```env
SECRET_KEY=clave-super-secreta-de-al-menos-32-caracteres
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=7
BCRYPT_ROUNDS=12
```

## üß™ Testing

### Ejecutar Tests de Autenticaci√≥n
```bash
pytest tests/test_auth.py -v
```

### Ejecutar Tests de Usuarios
```bash
pytest tests/test_usuarios.py -v
```

### Tests con Autenticaci√≥n
Los tests incluyen fixtures para:
- Usuario administrador
- Usuario de RRHH
- Headers de autenticaci√≥n
- Creaci√≥n de usuarios de prueba

## üìä Auditor√≠a

### Eventos Registrados
- Intentos de login (exitosos y fallidos)
- Cambios de contrase√±a
- Creaci√≥n/modificaci√≥n de usuarios
- Asignaci√≥n de permisos
- Acceso a recursos protegidos

### Logs de Seguridad
```
AUTH SUCCESS: admin@hojaverde.com - Login exitoso
AUTH FAILED: user@test.com - Credenciales inv√°lidas
AUTHZ GRANTED: User 123 - Permission 'empleados.crear'
AUTHZ DENIED: User 456 - Permission 'usuarios.eliminar'
```

## üîß Comandos √ötiles

### Crear Usuario Administrador
```bash
python scripts/init_admin.py
```

### Crear Usuarios de Ejemplo
```bash
python scripts/init_admin.py --samples
```

### Verificar Estado del Sistema
```bash
python scripts/init_admin.py --status
```

### Verificar Acceso del Admin
```bash
python scripts/init_admin.py --verify
```

## üêõ Troubleshooting

### Error: "Token inv√°lido o expirado"
- Verificar que el token no haya expirado
- Usar refresh token para obtener uno nuevo
- Verificar formato: `Bearer <token>`

### Error: "Usuario bloqueado"
- Esperar 15 minutos o usar endpoint de desbloqueo
- Verificar intentos fallidos en la base de datos

### Error: "Acceso denegado"
- Verificar que el usuario tenga los permisos necesarios
- Revisar el rol del usuario
- Verificar que el usuario est√© activo

### Error de Conexi√≥n a Base de Datos
- Verificar configuraci√≥n en `.env`
- Asegurarse de que PostgreSQL est√© corriendo
- Verificar que las migraciones est√©n aplicadas

## üìö Pr√≥ximos Pasos

Con el sistema de autenticaci√≥n implementado, puedes continuar con:

1. **Registros de Asistencia**: M√≥dulo para registrar entrada/salida
2. **Sistema de Alimentaci√≥n**: Registro de comidas
3. **Reportes Avanzados**: Reportes con autenticaci√≥n
4. **API Keys**: Para integraciones externas
5. **Two-Factor Authentication**: Seguridad adicional
6. **Frontend**: Interfaz de usuario con Next.js