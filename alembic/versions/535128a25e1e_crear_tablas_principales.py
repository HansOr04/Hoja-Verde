"""Crear tablas principales

Revision ID: 535128a25e1e
Revises: 
Create Date: 2025-06-02 19:33:47.388801

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '535128a25e1e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('empleados',
    sa.Column('cedula', sa.String(length=10), nullable=False),
    sa.Column('nombres', sa.String(length=100), nullable=False),
    sa.Column('apellidos', sa.String(length=100), nullable=False),
    sa.Column('area', sa.String(length=50), nullable=False),
    sa.Column('cargo', sa.String(length=50), nullable=False),
    sa.Column('jornada_horas', sa.DECIMAL(precision=4, scale=2), nullable=True),
    sa.Column('estado', sa.String(length=10), nullable=True),
    sa.Column('codigo_qr', sa.String(length=100), nullable=True),
    sa.Column('fecha_ingreso', sa.Date(), nullable=True),
    sa.Column('unidad_productiva', sa.String(length=50), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.CheckConstraint("area IN ('Producción', 'Calidad', 'Mantenimiento', 'Administración')", name='check_area_values'),
    sa.CheckConstraint("cargo IN ('Trabajador Agrícola', 'Talento Humano', 'Supervisor', 'Administrador')", name='check_cargo_values'),
    sa.CheckConstraint("cedula ~ '^[0-9]{10}$'", name='check_cedula_format'),
    sa.CheckConstraint("estado IN ('activo', 'inactivo', 'suspendido')", name='check_estado_values'),
    sa.CheckConstraint('jornada_horas >= 4.00 AND jornada_horas <= 12.00', name='check_jornada_horas'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('codigo_qr')
    )
    op.create_index(op.f('ix_empleados_cedula'), 'empleados', ['cedula'], unique=True)
    op.create_index(op.f('ix_empleados_id'), 'empleados', ['id'], unique=False)
    op.create_table('registros_diarios',
    sa.Column('empleado_id', sa.UUID(), nullable=False),
    sa.Column('fecha', sa.Date(), nullable=False),
    sa.Column('dia_semana', sa.String(length=10), nullable=True),
    sa.Column('hora_entrada', sa.Time(), nullable=True),
    sa.Column('hora_salida', sa.Time(), nullable=True),
    sa.Column('tiempo_lunch', postgresql.INTERVAL(), nullable=True),
    sa.Column('hr_25', sa.DECIMAL(precision=4, scale=2), nullable=True),
    sa.Column('hs_50', sa.DECIMAL(precision=4, scale=2), nullable=True),
    sa.Column('he_100', sa.DECIMAL(precision=4, scale=2), nullable=True),
    sa.Column('horas_permiso', sa.DECIMAL(precision=4, scale=2), nullable=True),
    sa.Column('transporte', sa.Boolean(), nullable=True),
    sa.Column('observaciones', sa.Text(), nullable=True),
    sa.Column('estado', sa.String(length=15), nullable=True),
    sa.Column('aprobado_por', sa.UUID(), nullable=True),
    sa.Column('fecha_aprobacion', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.CheckConstraint("dia_semana IN ('L', 'M', 'MI', 'J', 'V', 'S', 'D')", name='check_dia_semana'),
    sa.CheckConstraint("estado IN ('pendiente', 'aprobado', 'rechazado')", name='check_estado_values'),
    sa.CheckConstraint("fecha >= '2024-01-01' AND fecha <= CURRENT_DATE + INTERVAL '1 day'", name='check_fecha_range'),
    sa.CheckConstraint("tiempo_lunch >= '00:30:00' AND tiempo_lunch <= '02:00:00'", name='check_tiempo_lunch'),
    sa.CheckConstraint('he_100 >= 0.00 AND he_100 <= 8.00', name='check_he_100_range'),
    sa.CheckConstraint('hora_salida IS NULL OR hora_entrada IS NULL OR hora_salida > hora_entrada', name='check_horas_logicas'),
    sa.CheckConstraint('horas_permiso >= 0.00 AND horas_permiso <= 8.00', name='check_horas_permiso'),
    sa.CheckConstraint('hr_25 >= 0.00 AND hr_25 <= 4.00', name='check_hr_25_range'),
    sa.CheckConstraint('hs_50 >= 0.00 AND hs_50 <= 4.00', name='check_hs_50_range'),
    sa.ForeignKeyConstraint(['aprobado_por'], ['empleados.id'], ),
    sa.ForeignKeyConstraint(['empleado_id'], ['empleados.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('empleado_id', 'fecha', name='unique_empleado_fecha')
    )
    op.create_index(op.f('ix_registros_diarios_id'), 'registros_diarios', ['id'], unique=False)
    op.create_table('alimentacion',
    sa.Column('registro_id', sa.UUID(), nullable=False),
    sa.Column('desayuno', sa.Integer(), nullable=True),
    sa.Column('desayuno_reforzado', sa.Integer(), nullable=True),
    sa.Column('refrigerio', sa.Integer(), nullable=True),
    sa.Column('merienda', sa.Integer(), nullable=True),
    sa.Column('seco', sa.Integer(), nullable=True),
    sa.Column('almuerzo', sa.Integer(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.CheckConstraint('almuerzo >= 0 AND almuerzo <= 3', name='check_almuerzo_range'),
    sa.CheckConstraint('desayuno >= 0 AND desayuno <= 5', name='check_desayuno_range'),
    sa.CheckConstraint('desayuno_reforzado >= 0 AND desayuno_reforzado <= 3', name='check_desayuno_reforzado_range'),
    sa.CheckConstraint('merienda >= 0 AND merienda <= 3', name='check_merienda_range'),
    sa.CheckConstraint('refrigerio >= 0 AND refrigerio <= 5', name='check_refrigerio_range'),
    sa.CheckConstraint('seco >= 0 AND seco <= 3', name='check_seco_range'),
    sa.ForeignKeyConstraint(['registro_id'], ['registros_diarios.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_alimentacion_id'), 'alimentacion', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_alimentacion_id'), table_name='alimentacion')
    op.drop_table('alimentacion')
    op.drop_index(op.f('ix_registros_diarios_id'), table_name='registros_diarios')
    op.drop_table('registros_diarios')
    op.drop_index(op.f('ix_empleados_id'), table_name='empleados')
    op.drop_index(op.f('ix_empleados_cedula'), table_name='empleados')
    op.drop_table('empleados')
    # ### end Alembic commands ###
